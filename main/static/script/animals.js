// Generated by CoffeeScript 1.3.3

/*
# Copyright 2012 PAWS. All rights reserved.
# Date: 5/23/2012
# Animals coffeescript
# TODO(): Add description
*/


(function() {

  $(document).ready(function() {
    var Animal, AnimalListViewModel, MAX_SCROLLER_ROWS, Species, resizeAllCarousels, resizeCarousel;
    Animal = (function() {

      function Animal(data) {
        this.active = ko.observable(false);
        this.name = ko.observable(data.name);
        this.speciesScientificName = ko.observable(data.species.scientific_name);
        this.speciesCommonName = ko.observable(data.species.common_name);
        this.speciesId = ko.observable(data.species.id);
      }

      Animal.prototype.toggleActive = function() {
        return this.active(!this.active());
      };

      return Animal;

    })();
    Species = (function() {

      function Species(data) {
        this.commonName = ko.observable(data.common_name);
        this.scientificName = ko.observable(data.scientific_name);
        this.id = ko.observable(data.id);
      }

      return Species;

    })();
    AnimalListViewModel = (function() {

      function AnimalListViewModel() {
        var _this = this;
        this.species = ko.observableArray([]);
        this.animals = ko.observableArray([]);
        this.currentSpecies = ko.observable('');
        this.setCurrentSpecies = function(species) {
          if (species === _this.currentSpecies()) {
            _this.currentSpecies('');
          } else {
            _this.currentSpecies(species);
          }
          return resizeAllCarousels();
        };
        this.filterAnimalsBySpecies = ko.computed(function() {
          var species;
          species = _this.currentSpecies();
          if (species === '') {
            return _this.animals();
          }
          return ko.utils.arrayFilter(_this.animals(), function(animal) {
            return animal.speciesId() === species.id();
          });
        });
        $.getJSON('/api/v1/species/?format=json', function(data) {
          var mappedSpecies;
          mappedSpecies = $.map(data.objects, function(item) {
            return new Species(item);
          });
          return _this.species(mappedSpecies);
        });
        $.getJSON('/api/v1/animal/?format=json', function(data) {
          var mappedAnimals;
          mappedAnimals = $.map(data.objects, function(item) {
            return new Animal(item);
          });
          _this.animals(mappedAnimals);
          return resizeAllCarousels(false);
        });
      }

      return AnimalListViewModel;

    })();
    ko.applyBindings(new AnimalListViewModel());
    MAX_SCROLLER_ROWS = 3;
    window.scrollers = {};
    resizeCarousel = function(scroller, numRows, fixedWidth) {
      var length, newWidth, oldWidth;
      if (numRows == null) {
        numRows = 1;
      }
      if (fixedWidth == null) {
        fixedWidth = true;
      }
      oldWidth = $(scroller).width();
      length = $(scroller).find('ul li').length;
      newWidth = 0;
      if (fixedWidth) {
        newWidth = Math.ceil(length / numRows) * $(scroller).find('ul li:first').outerWidth(true) + 10;
      } else {
        $(scroller).find('ul li').each(function() {
          return newWidth += $(this).outerWidth(true);
        });
      }
      if (length / numRows > 1) {
        newWidth /= numRows;
      }
      if (newWidth !== oldWidth) {
        console.log('Resizing carousel from ' + oldWidth + ' to ' + newWidth + ' with ' + numRows + ' rows');
        $(scroller).width(newWidth);
        return true;
      }
      return false;
    };
    resizeAllCarousels = function(refresh) {
      if (refresh == null) {
        refresh = true;
      }
      return $('.carousel-scroller').each(function() {
        var numRows, resized;
        if ($(this).hasClass('carousel-rows')) {
          numRows = Math.min(Math.floor(($(window).height() - $(this).parent().offset().top) / $(this).find('li:first').outerHeight(true)), MAX_SCROLLER_ROWS);
          resized = resizeCarousel(this, numRows, false);
        } else {
          resized = resizeCarousel(this, 1, false);
        }
        if (refresh && resized) {
          console.log('Refreshing carousel');
          return scrollers[$(this).parent().prop('id')].refresh();
        }
      });
    };
    scrollers.speciesSelector = new iScroll('speciesSelector', {
      vScroll: false,
      momentum: true,
      bounce: true,
      hScrollbar: false
    });
    scrollers.animalSelector = new iScroll('animalSelector', {
      vScroll: false,
      momentum: true,
      bounce: true,
      hScrollbar: false
    });
    return $(window).resize(function() {
      clearTimeout(window.resizeTimeout);
      return window.resizeTimeout = setTimeout(resizeAllCarousels, 500);
    });
  });

}).call(this);
